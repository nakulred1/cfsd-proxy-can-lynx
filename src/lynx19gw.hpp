/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 32.6.3 Mon Jul 20 14:41:35 2020.
 */

#ifndef LYNX19GW_H
#define LYNX19GW_H

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

#define LYNX19GW_MOTOR_CONTROL_MESSAGE_FRAME_ID (0x10u)
#define LYNX19GW_FRONT_NODE_STATUS_FRAME_ID (0x1fu)
#define LYNX19GW_REAR_NODE_STATUS_FRAME_ID (0x20u)
#define LYNX19GW_AMS_STATUS_FRAME_ID (0x21u)
#define LYNX19GW_APPS_FRAME_ID (0x32u)
#define LYNX19GW_TEST_CAN_MESSAGE_1_FRAME_ID (0xc8u)
#define LYNX19GW_TEST_CAN_MESSAGE_2_FRAME_ID (0xc9u)
#define LYNX19GW_TEST_CAN_MESSAGE_3_FRAME_ID (0xc9u)
#define LYNX19GW_L3_GD20_ROTATION_B_FRAME_ID (0x611u)

/**
 * Signals in message MOTOR_CONTROL_MESSAGE.
 *
 * All signal values are as on the CAN bus.
 */
struct lynx19gw_motor_control_message_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pwm_enabled;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t torque_setpoint;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t speed_setpoint;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t max_power_setpoint;
};

/**
 * Signals in message FRONT_NODE_STATUS.
 *
 * All signal values are as on the CAN bus.
 */
struct lynx19gw_front_node_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t ready_to_drive;
};

/**
 * Signals in message REAR_NODE_STATUS.
 *
 * All signal values are as on the CAN bus.
 */
struct lynx19gw_rear_node_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t ready_to_drive;
};

/**
 * Signals in message AMS_STATUS.
 *
 * All signal values are as on the CAN bus.
 */
struct lynx19gw_ams_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t ready_to_drive;
};

/**
 * Signals in message APPS.
 *
 * All signal values are as on the CAN bus.
 */
struct lynx19gw_apps_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float throttle_percentage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t apps_fault;
};

/**
 * Signals in message TEST_CAN_MESSAGE_1.
 *
 * All signal values are as on the CAN bus.
 */
struct lynx19gw_test_can_message_1_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t test_message;
};

/**
 * Signals in message TEST_CAN_MESSAGE_2.
 *
 * All signal values are as on the CAN bus.
 */
struct lynx19gw_test_can_message_2_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t test_message;
};

/**
 * Signals in message TEST_CAN_MESSAGE_3.
 *
 * All signal values are as on the CAN bus.
 */
struct lynx19gw_test_can_message_3_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t test_message;
};

/**
 * Signals in message L3GD20_Rotation_B.
 *
 * All signal values are as on the CAN bus.
 */
struct lynx19gw_l3_gd20_rotation_b_t {
    /**
     * Range: -4000..4000 (-4000..4000 deg/s)
     * Scale: 1
     * Offset: 0
     */
    float rotation_z;
};

/**
 * Pack message MOTOR_CONTROL_MESSAGE.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
inline int lynx19gw_motor_control_message_pack(
    uint8_t *dst_p,
    const struct lynx19gw_motor_control_message_t *src_p,
    size_t size);

/**
 * Unpack message MOTOR_CONTROL_MESSAGE.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
inline int lynx19gw_motor_control_message_unpack(
    struct lynx19gw_motor_control_message_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
inline uint8_t lynx19gw_motor_control_message_pwm_enabled_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
inline double lynx19gw_motor_control_message_pwm_enabled_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
inline bool lynx19gw_motor_control_message_pwm_enabled_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
inline uint16_t lynx19gw_motor_control_message_torque_setpoint_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
inline double lynx19gw_motor_control_message_torque_setpoint_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
inline bool lynx19gw_motor_control_message_torque_setpoint_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
inline uint16_t lynx19gw_motor_control_message_speed_setpoint_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
inline double lynx19gw_motor_control_message_speed_setpoint_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
inline bool lynx19gw_motor_control_message_speed_setpoint_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
inline uint16_t lynx19gw_motor_control_message_max_power_setpoint_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
inline double lynx19gw_motor_control_message_max_power_setpoint_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
inline bool lynx19gw_motor_control_message_max_power_setpoint_is_in_range(uint16_t value);

/**
 * Pack message FRONT_NODE_STATUS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
inline int lynx19gw_front_node_status_pack(
    uint8_t *dst_p,
    const struct lynx19gw_front_node_status_t *src_p,
    size_t size);

/**
 * Unpack message FRONT_NODE_STATUS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
inline int lynx19gw_front_node_status_unpack(
    struct lynx19gw_front_node_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
inline int8_t lynx19gw_front_node_status_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
inline double lynx19gw_front_node_status_counter_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
inline bool lynx19gw_front_node_status_counter_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
inline int8_t lynx19gw_front_node_status_ready_to_drive_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
inline double lynx19gw_front_node_status_ready_to_drive_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
inline bool lynx19gw_front_node_status_ready_to_drive_is_in_range(int8_t value);

/**
 * Pack message REAR_NODE_STATUS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
inline int lynx19gw_rear_node_status_pack(
    uint8_t *dst_p,
    const struct lynx19gw_rear_node_status_t *src_p,
    size_t size);

/**
 * Unpack message REAR_NODE_STATUS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
inline int lynx19gw_rear_node_status_unpack(
    struct lynx19gw_rear_node_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
inline int8_t lynx19gw_rear_node_status_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
inline double lynx19gw_rear_node_status_counter_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
inline bool lynx19gw_rear_node_status_counter_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
inline int8_t lynx19gw_rear_node_status_ready_to_drive_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
inline double lynx19gw_rear_node_status_ready_to_drive_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
inline bool lynx19gw_rear_node_status_ready_to_drive_is_in_range(int8_t value);

/**
 * Pack message AMS_STATUS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
inline int lynx19gw_ams_status_pack(
    uint8_t *dst_p,
    const struct lynx19gw_ams_status_t *src_p,
    size_t size);

/**
 * Unpack message AMS_STATUS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
inline int lynx19gw_ams_status_unpack(
    struct lynx19gw_ams_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
inline int8_t lynx19gw_ams_status_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
inline double lynx19gw_ams_status_counter_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
inline bool lynx19gw_ams_status_counter_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
inline int8_t lynx19gw_ams_status_ready_to_drive_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
inline double lynx19gw_ams_status_ready_to_drive_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
inline bool lynx19gw_ams_status_ready_to_drive_is_in_range(int8_t value);

/**
 * Pack message APPS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
inline int lynx19gw_apps_pack(
    uint8_t *dst_p,
    const struct lynx19gw_apps_t *src_p,
    size_t size);

/**
 * Unpack message APPS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
inline int lynx19gw_apps_unpack(
    struct lynx19gw_apps_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
inline float lynx19gw_apps_throttle_percentage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
inline double lynx19gw_apps_throttle_percentage_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
inline bool lynx19gw_apps_throttle_percentage_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
inline uint8_t lynx19gw_apps_apps_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
inline double lynx19gw_apps_apps_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
inline bool lynx19gw_apps_apps_fault_is_in_range(uint8_t value);

/**
 * Pack message TEST_CAN_MESSAGE_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
inline int lynx19gw_test_can_message_1_pack(
    uint8_t *dst_p,
    const struct lynx19gw_test_can_message_1_t *src_p,
    size_t size);

/**
 * Unpack message TEST_CAN_MESSAGE_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
inline int lynx19gw_test_can_message_1_unpack(
    struct lynx19gw_test_can_message_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
inline uint8_t lynx19gw_test_can_message_1_test_message_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
inline double lynx19gw_test_can_message_1_test_message_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
inline bool lynx19gw_test_can_message_1_test_message_is_in_range(uint8_t value);

/**
 * Pack message TEST_CAN_MESSAGE_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
inline int lynx19gw_test_can_message_2_pack(
    uint8_t *dst_p,
    const struct lynx19gw_test_can_message_2_t *src_p,
    size_t size);

/**
 * Unpack message TEST_CAN_MESSAGE_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
inline int lynx19gw_test_can_message_2_unpack(
    struct lynx19gw_test_can_message_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
inline uint8_t lynx19gw_test_can_message_2_test_message_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
inline double lynx19gw_test_can_message_2_test_message_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
inline bool lynx19gw_test_can_message_2_test_message_is_in_range(uint8_t value);

/**
 * Pack message TEST_CAN_MESSAGE_3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
inline int lynx19gw_test_can_message_3_pack(
    uint8_t *dst_p,
    const struct lynx19gw_test_can_message_3_t *src_p,
    size_t size);

/**
 * Unpack message TEST_CAN_MESSAGE_3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
inline int lynx19gw_test_can_message_3_unpack(
    struct lynx19gw_test_can_message_3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
inline uint8_t lynx19gw_test_can_message_3_test_message_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
inline double lynx19gw_test_can_message_3_test_message_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
inline bool lynx19gw_test_can_message_3_test_message_is_in_range(uint8_t value);

/**
 * Pack message L3GD20_Rotation_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
inline int lynx19gw_l3_gd20_rotation_b_pack(
    uint8_t *dst_p,
    const struct lynx19gw_l3_gd20_rotation_b_t *src_p,
    size_t size);

/**
 * Unpack message L3GD20_Rotation_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
inline int lynx19gw_l3_gd20_rotation_b_unpack(
    struct lynx19gw_l3_gd20_rotation_b_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
inline float lynx19gw_l3_gd20_rotation_b_rotation_z_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
inline double lynx19gw_l3_gd20_rotation_b_rotation_z_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
inline bool lynx19gw_l3_gd20_rotation_b_rotation_z_is_in_range(float value);

#endif
/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 32.6.3 Mon Jul 20 14:41:35 2020.
 */

#include <string.h>

//#include "lynx19gw.h"

static inline uint8_t pack_left_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value << shift) & mask);
}

static inline uint8_t pack_left_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value << shift) & mask);
}

static inline uint8_t pack_left_shift_u32(
    uint32_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value << shift) & mask);
}

static inline uint8_t pack_right_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value >> shift) & mask);
}

static inline uint8_t pack_right_shift_u32(
    uint32_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value >> shift) & mask);
}

static inline uint16_t unpack_left_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint16_t)((uint16_t)(value & mask) << shift);
}

static inline uint32_t unpack_left_shift_u32(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint32_t)((uint32_t)(value & mask) << shift);
}

static inline uint8_t unpack_right_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value & mask) >> shift);
}

static inline uint16_t unpack_right_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint16_t)((uint16_t)(value & mask) >> shift);
}

static inline uint32_t unpack_right_shift_u32(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint32_t)((uint32_t)(value & mask) >> shift);
}

int lynx19gw_motor_control_message_pack(
    uint8_t *dst_p,
    const struct lynx19gw_motor_control_message_t *src_p,
    size_t size)
{
    if (size < 7u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 7);

    dst_p[0] |= pack_left_shift_u8(src_p->pwm_enabled, 0u, 0xffu);
    dst_p[1] |= pack_left_shift_u16(src_p->torque_setpoint, 0u, 0xffu);
    dst_p[2] |= pack_right_shift_u16(src_p->torque_setpoint, 8u, 0xffu);
    dst_p[3] |= pack_left_shift_u16(src_p->speed_setpoint, 0u, 0xffu);
    dst_p[4] |= pack_right_shift_u16(src_p->speed_setpoint, 8u, 0xffu);
    dst_p[5] |= pack_left_shift_u16(src_p->max_power_setpoint, 0u, 0xffu);
    dst_p[6] |= pack_right_shift_u16(src_p->max_power_setpoint, 8u, 0xffu);

    return (7);
}

int lynx19gw_motor_control_message_unpack(
    struct lynx19gw_motor_control_message_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    if (size < 7u) {
        return (-EINVAL);
    }

    memset(dst_p, 0, sizeof(*dst_p));

    dst_p->pwm_enabled |= unpack_right_shift_u8(src_p[0], 0u, 0xffu);
    dst_p->torque_setpoint |= unpack_right_shift_u16(src_p[1], 0u, 0xffu);
    dst_p->torque_setpoint |= unpack_left_shift_u16(src_p[2], 8u, 0xffu);
    dst_p->speed_setpoint |= unpack_right_shift_u16(src_p[3], 0u, 0xffu);
    dst_p->speed_setpoint |= unpack_left_shift_u16(src_p[4], 8u, 0xffu);
    dst_p->max_power_setpoint |= unpack_right_shift_u16(src_p[5], 0u, 0xffu);
    dst_p->max_power_setpoint |= unpack_left_shift_u16(src_p[6], 8u, 0xffu);

    return (0);
}

uint8_t lynx19gw_motor_control_message_pwm_enabled_encode(double value)
{
    return (uint8_t)(value);
}

double lynx19gw_motor_control_message_pwm_enabled_decode(uint8_t value)
{
    return ((double)value);
}

bool lynx19gw_motor_control_message_pwm_enabled_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint16_t lynx19gw_motor_control_message_torque_setpoint_encode(double value)
{
    return (uint16_t)(value);
}

double lynx19gw_motor_control_message_torque_setpoint_decode(uint16_t value)
{
    return ((double)value);
}

bool lynx19gw_motor_control_message_torque_setpoint_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t lynx19gw_motor_control_message_speed_setpoint_encode(double value)
{
    return (uint16_t)(value);
}

double lynx19gw_motor_control_message_speed_setpoint_decode(uint16_t value)
{
    return ((double)value);
}

bool lynx19gw_motor_control_message_speed_setpoint_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t lynx19gw_motor_control_message_max_power_setpoint_encode(double value)
{
    return (uint16_t)(value);
}

double lynx19gw_motor_control_message_max_power_setpoint_decode(uint16_t value)
{
    return ((double)value);
}

bool lynx19gw_motor_control_message_max_power_setpoint_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

int lynx19gw_front_node_status_pack(
    uint8_t *dst_p,
    const struct lynx19gw_front_node_status_t *src_p,
    size_t size)
{
    uint8_t counter;
    uint8_t ready_to_drive;

    if (size < 2u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 2);

    counter = (uint8_t)src_p->counter;
    dst_p[0] |= pack_left_shift_u8(counter, 0u, 0xffu);
    ready_to_drive = (uint8_t)src_p->ready_to_drive;
    dst_p[1] |= pack_left_shift_u8(ready_to_drive, 0u, 0xffu);

    return (2);
}

int lynx19gw_front_node_status_unpack(
    struct lynx19gw_front_node_status_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    uint8_t counter;
    uint8_t ready_to_drive;

    if (size < 2u) {
        return (-EINVAL);
    }

    memset(dst_p, 0, sizeof(*dst_p));

    counter = 0u;
    counter |= unpack_right_shift_u8(src_p[0], 0u, 0xffu);
    dst_p->counter = (int8_t)counter;
    ready_to_drive = 0u;
    ready_to_drive |= unpack_right_shift_u8(src_p[1], 0u, 0xffu);
    dst_p->ready_to_drive = (int8_t)ready_to_drive;

    return (0);
}

int8_t lynx19gw_front_node_status_counter_encode(double value)
{
    return (int8_t)(value);
}

double lynx19gw_front_node_status_counter_decode(int8_t value)
{
    return ((double)value);
}

bool lynx19gw_front_node_status_counter_is_in_range(int8_t value)
{
    (void)value;

    return (true);
}

int8_t lynx19gw_front_node_status_ready_to_drive_encode(double value)
{
    return (int8_t)(value);
}

double lynx19gw_front_node_status_ready_to_drive_decode(int8_t value)
{
    return ((double)value);
}

bool lynx19gw_front_node_status_ready_to_drive_is_in_range(int8_t value)
{
    (void)value;

    return (true);
}

int lynx19gw_rear_node_status_pack(
    uint8_t *dst_p,
    const struct lynx19gw_rear_node_status_t *src_p,
    size_t size)
{
    uint8_t counter;
    uint8_t ready_to_drive;

    if (size < 2u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 2);

    counter = (uint8_t)src_p->counter;
    dst_p[0] |= pack_left_shift_u8(counter, 0u, 0xffu);
    ready_to_drive = (uint8_t)src_p->ready_to_drive;
    dst_p[1] |= pack_left_shift_u8(ready_to_drive, 0u, 0xffu);

    return (2);
}

int lynx19gw_rear_node_status_unpack(
    struct lynx19gw_rear_node_status_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    uint8_t counter;
    uint8_t ready_to_drive;

    if (size < 2u) {
        return (-EINVAL);
    }

    memset(dst_p, 0, sizeof(*dst_p));

    counter = 0u;
    counter |= unpack_right_shift_u8(src_p[0], 0u, 0xffu);
    dst_p->counter = (int8_t)counter;
    ready_to_drive = 0u;
    ready_to_drive |= unpack_right_shift_u8(src_p[1], 0u, 0xffu);
    dst_p->ready_to_drive = (int8_t)ready_to_drive;

    return (0);
}

int8_t lynx19gw_rear_node_status_counter_encode(double value)
{
    return (int8_t)(value);
}

double lynx19gw_rear_node_status_counter_decode(int8_t value)
{
    return ((double)value);
}

bool lynx19gw_rear_node_status_counter_is_in_range(int8_t value)
{
    (void)value;

    return (true);
}

int8_t lynx19gw_rear_node_status_ready_to_drive_encode(double value)
{
    return (int8_t)(value);
}

double lynx19gw_rear_node_status_ready_to_drive_decode(int8_t value)
{
    return ((double)value);
}

bool lynx19gw_rear_node_status_ready_to_drive_is_in_range(int8_t value)
{
    (void)value;

    return (true);
}

int lynx19gw_ams_status_pack(
    uint8_t *dst_p,
    const struct lynx19gw_ams_status_t *src_p,
    size_t size)
{
    uint8_t counter;
    uint8_t ready_to_drive;

    if (size < 2u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 2);

    counter = (uint8_t)src_p->counter;
    dst_p[0] |= pack_left_shift_u8(counter, 0u, 0xffu);
    ready_to_drive = (uint8_t)src_p->ready_to_drive;
    dst_p[1] |= pack_left_shift_u8(ready_to_drive, 0u, 0xffu);

    return (2);
}

int lynx19gw_ams_status_unpack(
    struct lynx19gw_ams_status_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    uint8_t counter;
    uint8_t ready_to_drive;

    if (size < 2u) {
        return (-EINVAL);
    }

    memset(dst_p, 0, sizeof(*dst_p));

    counter = 0u;
    counter |= unpack_right_shift_u8(src_p[0], 0u, 0xffu);
    dst_p->counter = (int8_t)counter;
    ready_to_drive = 0u;
    ready_to_drive |= unpack_right_shift_u8(src_p[1], 0u, 0xffu);
    dst_p->ready_to_drive = (int8_t)ready_to_drive;

    return (0);
}

int8_t lynx19gw_ams_status_counter_encode(double value)
{
    return (int8_t)(value);
}

double lynx19gw_ams_status_counter_decode(int8_t value)
{
    return ((double)value);
}

bool lynx19gw_ams_status_counter_is_in_range(int8_t value)
{
    (void)value;

    return (true);
}

int8_t lynx19gw_ams_status_ready_to_drive_encode(double value)
{
    return (int8_t)(value);
}

double lynx19gw_ams_status_ready_to_drive_decode(int8_t value)
{
    return ((double)value);
}

bool lynx19gw_ams_status_ready_to_drive_is_in_range(int8_t value)
{
    (void)value;

    return (true);
}

int lynx19gw_apps_pack(
    uint8_t *dst_p,
    const struct lynx19gw_apps_t *src_p,
    size_t size)
{
    uint32_t throttle_percentage;

    if (size < 5u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 5);

    memcpy(&throttle_percentage, &src_p->throttle_percentage, sizeof(throttle_percentage));
    dst_p[0] |= pack_left_shift_u32(throttle_percentage, 0u, 0xffu);
    dst_p[1] |= pack_right_shift_u32(throttle_percentage, 8u, 0xffu);
    dst_p[2] |= pack_right_shift_u32(throttle_percentage, 16u, 0xffu);
    dst_p[3] |= pack_right_shift_u32(throttle_percentage, 24u, 0xffu);
    dst_p[4] |= pack_left_shift_u8(src_p->apps_fault, 0u, 0x01u);

    return (5);
}

int lynx19gw_apps_unpack(
    struct lynx19gw_apps_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    uint32_t throttle_percentage;

    if (size < 5u) {
        return (-EINVAL);
    }

    memset(dst_p, 0, sizeof(*dst_p));

    throttle_percentage = 0u;
    throttle_percentage |= unpack_right_shift_u32(src_p[0], 0u, 0xffu);
    throttle_percentage |= unpack_left_shift_u32(src_p[1], 8u, 0xffu);
    throttle_percentage |= unpack_left_shift_u32(src_p[2], 16u, 0xffu);
    throttle_percentage |= unpack_left_shift_u32(src_p[3], 24u, 0xffu);
    memcpy(&dst_p->throttle_percentage, &throttle_percentage, sizeof(dst_p->throttle_percentage));
    dst_p->apps_fault |= unpack_right_shift_u8(src_p[4], 0u, 0x01u);

    return (0);
}

float lynx19gw_apps_throttle_percentage_encode(double value)
{
    return (float)(value);
}

double lynx19gw_apps_throttle_percentage_decode(float value)
{
    return ((double)value);
}

bool lynx19gw_apps_throttle_percentage_is_in_range(float value)
{
    (void)value;

    return (true);
}

uint8_t lynx19gw_apps_apps_fault_encode(double value)
{
    return (uint8_t)(value);
}

double lynx19gw_apps_apps_fault_decode(uint8_t value)
{
    return ((double)value);
}

bool lynx19gw_apps_apps_fault_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

int lynx19gw_test_can_message_1_pack(
    uint8_t *dst_p,
    const struct lynx19gw_test_can_message_1_t *src_p,
    size_t size)
{
    if (size < 1u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 1);

    dst_p[0] |= pack_left_shift_u8(src_p->test_message, 0u, 0xffu);

    return (1);
}

int lynx19gw_test_can_message_1_unpack(
    struct lynx19gw_test_can_message_1_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    if (size < 1u) {
        return (-EINVAL);
    }

    memset(dst_p, 0, sizeof(*dst_p));

    dst_p->test_message |= unpack_right_shift_u8(src_p[0], 0u, 0xffu);

    return (0);
}

uint8_t lynx19gw_test_can_message_1_test_message_encode(double value)
{
    return (uint8_t)(value);
}

double lynx19gw_test_can_message_1_test_message_decode(uint8_t value)
{
    return ((double)value);
}

bool lynx19gw_test_can_message_1_test_message_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

int lynx19gw_test_can_message_2_pack(
    uint8_t *dst_p,
    const struct lynx19gw_test_can_message_2_t *src_p,
    size_t size)
{
    if (size < 1u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 1);

    dst_p[0] |= pack_left_shift_u8(src_p->test_message, 0u, 0xffu);

    return (1);
}

int lynx19gw_test_can_message_2_unpack(
    struct lynx19gw_test_can_message_2_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    if (size < 1u) {
        return (-EINVAL);
    }

    memset(dst_p, 0, sizeof(*dst_p));

    dst_p->test_message |= unpack_right_shift_u8(src_p[0], 0u, 0xffu);

    return (0);
}

uint8_t lynx19gw_test_can_message_2_test_message_encode(double value)
{
    return (uint8_t)(value);
}

double lynx19gw_test_can_message_2_test_message_decode(uint8_t value)
{
    return ((double)value);
}

bool lynx19gw_test_can_message_2_test_message_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

int lynx19gw_test_can_message_3_pack(
    uint8_t *dst_p,
    const struct lynx19gw_test_can_message_3_t *src_p,
    size_t size)
{
    if (size < 1u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 1);

    dst_p[0] |= pack_left_shift_u8(src_p->test_message, 0u, 0xffu);

    return (1);
}

int lynx19gw_test_can_message_3_unpack(
    struct lynx19gw_test_can_message_3_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    if (size < 1u) {
        return (-EINVAL);
    }

    memset(dst_p, 0, sizeof(*dst_p));

    dst_p->test_message |= unpack_right_shift_u8(src_p[0], 0u, 0xffu);

    return (0);
}

uint8_t lynx19gw_test_can_message_3_test_message_encode(double value)
{
    return (uint8_t)(value);
}

double lynx19gw_test_can_message_3_test_message_decode(uint8_t value)
{
    return ((double)value);
}

bool lynx19gw_test_can_message_3_test_message_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

int lynx19gw_l3_gd20_rotation_b_pack(
    uint8_t *dst_p,
    const struct lynx19gw_l3_gd20_rotation_b_t *src_p,
    size_t size)
{
    uint32_t rotation_z;

    if (size < 4u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 4);

    memcpy(&rotation_z, &src_p->rotation_z, sizeof(rotation_z));
    dst_p[0] |= pack_left_shift_u32(rotation_z, 0u, 0xffu);
    dst_p[1] |= pack_right_shift_u32(rotation_z, 8u, 0xffu);
    dst_p[2] |= pack_right_shift_u32(rotation_z, 16u, 0xffu);
    dst_p[3] |= pack_right_shift_u32(rotation_z, 24u, 0xffu);

    return (4);
}

int lynx19gw_l3_gd20_rotation_b_unpack(
    struct lynx19gw_l3_gd20_rotation_b_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    uint32_t rotation_z;

    if (size < 4u) {
        return (-EINVAL);
    }

    memset(dst_p, 0, sizeof(*dst_p));

    rotation_z = 0u;
    rotation_z |= unpack_right_shift_u32(src_p[0], 0u, 0xffu);
    rotation_z |= unpack_left_shift_u32(src_p[1], 8u, 0xffu);
    rotation_z |= unpack_left_shift_u32(src_p[2], 16u, 0xffu);
    rotation_z |= unpack_left_shift_u32(src_p[3], 24u, 0xffu);
    memcpy(&dst_p->rotation_z, &rotation_z, sizeof(dst_p->rotation_z));

    return (0);
}

float lynx19gw_l3_gd20_rotation_b_rotation_z_encode(double value)
{
    return (float)(value);
}

double lynx19gw_l3_gd20_rotation_b_rotation_z_decode(float value)
{
    return ((double)value);
}

bool lynx19gw_l3_gd20_rotation_b_rotation_z_is_in_range(float value)
{
    return ((value >= -4000.0f) && (value <= 4000.0f));
}

/*
 * THIS IS AN AUTO-GENERATED FILE. DO NOT MODIFY AS CHANGES MIGHT BE OVERWRITTEN!
 */

#ifndef VISITABLE_TYPE_TRAIT
#define VISITABLE_TYPE_TRAIT
#include <cstdint>
#include <string>
#include <utility>

template<bool b>
struct visitorSelector {
    template<typename T, class Visitor>
    static void impl(uint32_t fieldIdentifier, std::string &&typeName, std::string &&name, T &value, Visitor &visitor) {
        visitor.visit(fieldIdentifier, std::move(typeName), std::move(name), value);
    }
};

template<>
struct visitorSelector<true> {
    template<typename T, class Visitor>
    static void impl(uint32_t fieldIdentifier, std::string &&typeName, std::string &&name, T &value, Visitor &visitor) {
        visitor.visit(fieldIdentifier, std::move(typeName), std::move(name), value);
    }
};

template<typename T>
struct isVisitable {
    static const bool value = false;
};

template<typename T, class Visitor>
void doVisit(uint32_t fieldIdentifier, std::string &&typeName, std::string &&name, T &value, Visitor &visitor) {
    visitorSelector<isVisitable<T>::value >::impl(fieldIdentifier, std::move(typeName), std::move(name), value, visitor);
}
#endif

#ifndef TRIPLET_FORWARD_VISITABLE_TYPE_TRAIT
#define TRIPLET_FORWARD_VISITABLE_TYPE_TRAIT
#include <cstdint>
#include <string>
#include <utility>

template<bool b>
struct tripletForwardVisitorSelector {
    template<typename T, class PreVisitor, class Visitor, class PostVisitor>
    static void impl(uint32_t fieldIdentifier, std::string &&typeName, std::string &&name, T &value, PreVisitor &&preVisit, Visitor &&visit, PostVisitor &&postVisit) {
        (void)preVisit;
        (void)postVisit;
        std::forward<Visitor>(visit)(fieldIdentifier, std::move(typeName), std::move(name), value);
    }
};

template<>
struct tripletForwardVisitorSelector<true> {
    template<typename T, class PreVisitor, class Visitor, class PostVisitor>
    static void impl(uint32_t fieldIdentifier, std::string &&typeName, std::string &&name, T &value, PreVisitor &&preVisit, Visitor &&visit, PostVisitor &&postVisit) {
        (void)fieldIdentifier;
        (void)typeName;
        (void)name;
        // Apply preVisit, visit, and postVisit on value.
        value.accept(preVisit, visit, postVisit);
    }
};

template<typename T>
struct isTripletForwardVisitable {
    static const bool value = false;
};

template< typename T, class PreVisitor, class Visitor, class PostVisitor>
void doTripletForwardVisit(uint32_t fieldIdentifier, std::string &&typeName, std::string &&name, T &value, PreVisitor &&preVisit, Visitor &&visit, PostVisitor &&postVisit) {
    tripletForwardVisitorSelector<isTripletForwardVisitable<T>::value >::impl(fieldIdentifier, std::move(typeName), std::move(name), value, std::move(preVisit), std::move(visit), std::move(postVisit)); // NOLINT
}
#endif


#ifndef OPENDLV_PROXY_TEST_HPP
#define OPENDLV_PROXY_TEST_HPP

#ifdef WIN32
    // Export symbols if compile flags "LIB_SHARED" and "LIB_EXPORTS" are set on Windows.
    #ifdef LIB_SHARED
        #ifdef LIB_EXPORTS
            #define LIB_API __declspec(dllexport)
        #else
            #define LIB_API __declspec(dllimport)
        #endif
    #else
        // Disable definition if linking statically.
        #define LIB_API
    #endif
#else
    // Disable definition for non-Win32 systems.
    #define LIB_API
#endif

#include <string>
#include <utility>
namespace opendlv { namespace proxy {
using namespace std::string_literals; // NOLINT
class LIB_API Test {
    private:
        static constexpr const char* TheShortName = "Test";
        static constexpr const char* TheLongName = "opendlv.proxy.Test";

    public:
        inline static int32_t ID() {
            return 1001;
        }
        inline static const std::string ShortName() {
            return TheShortName;
        }
        inline static const std::string LongName() {
            return TheLongName;
        }

    public:
        Test() = default;
        Test(const Test&) = default;
        Test& operator=(const Test&) = default;
        Test(Test&&) = default;
        Test& operator=(Test&&) = default;
        ~Test() = default;

    public:
        
        inline Test& testCanMessage1(const int &v) noexcept {
            m_testCanMessage1 = v;
            return *this;
        }
        inline int testCanMessage1() const noexcept {
            return m_testCanMessage1;
        }
        
        inline Test& testCanMessage2(const int &v) noexcept {
            m_testCanMessage2 = v;
            return *this;
        }
        inline int testCanMessage2() const noexcept {
            return m_testCanMessage2;
        }
        
        inline Test& testCanMessage3(const int &v) noexcept {
            m_testCanMessage3 = v;
            return *this;
        }
        inline int testCanMessage3() const noexcept {
            return m_testCanMessage3;
        }
        

    public:
        template<class Visitor>
        inline void accept(uint32_t fieldId, Visitor &visitor) {
            (void)fieldId;
            (void)visitor;
//            visitor.preVisit(ID(), ShortName(), LongName());
            
            if (1 == fieldId) {
                doVisit(1, std::move("int"s), std::move("testCanMessage1"s), m_testCanMessage1, visitor);
                return;
            }
            
            if (2 == fieldId) {
                doVisit(2, std::move("int"s), std::move("testCanMessage2"s), m_testCanMessage2, visitor);
                return;
            }
            
            if (2 == fieldId) {
                doVisit(2, std::move("int"s), std::move("testCanMessage3"s), m_testCanMessage3, visitor);
                return;
            }
            
//            visitor.postVisit();
        }

        template<class Visitor>
        inline void accept(Visitor &visitor) {
            visitor.preVisit(ID(), ShortName(), LongName());
            
            doVisit(1, std::move("int"s), std::move("testCanMessage1"s), m_testCanMessage1, visitor);
            
            doVisit(2, std::move("int"s), std::move("testCanMessage2"s), m_testCanMessage2, visitor);
            
            doVisit(2, std::move("int"s), std::move("testCanMessage3"s), m_testCanMessage3, visitor);
            
            visitor.postVisit();
        }

        template<class PreVisitor, class Visitor, class PostVisitor>
        inline void accept(PreVisitor &&preVisit, Visitor &&visit, PostVisitor &&postVisit) {
            (void)visit; // Prevent warnings from empty messages.
            std::forward<PreVisitor>(preVisit)(ID(), ShortName(), LongName());
            
            doTripletForwardVisit(1, std::move("int"s), std::move("testCanMessage1"s), m_testCanMessage1, preVisit, visit, postVisit);
            
            doTripletForwardVisit(2, std::move("int"s), std::move("testCanMessage2"s), m_testCanMessage2, preVisit, visit, postVisit);
            
            doTripletForwardVisit(2, std::move("int"s), std::move("testCanMessage3"s), m_testCanMessage3, preVisit, visit, postVisit);
            
            std::forward<PostVisitor>(postVisit)();
        }

    private:
        
        int m_testCanMessage1{  }; // field identifier = 1.
        
        int m_testCanMessage2{  }; // field identifier = 2.
        
        int m_testCanMessage3{  }; // field identifier = 2.
        
};
}}

template<>
struct isVisitable<opendlv::proxy::Test> {
    static const bool value = true;
};
template<>
struct isTripletForwardVisitable<opendlv::proxy::Test> {
    static const bool value = true;
};
#endif

